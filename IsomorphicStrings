  object IsomorphicStrings {

    def isomorphicStr(s1: String, s2: String): Boolean = {
      if (s1.length != s2.length) false else {
        val cMap = new collection.mutable.HashMap[Char, Char]
        s1.zip(s2).forall { case (c1: Char, c2: Char) =>
          cMap.getOrElseUpdate(c1, c2) == c2
        }
      }
    }//...............................................

    def isomorphicStrUnique(s1: String, s2: String): Boolean = {
      if (s1.length != s2.length) false else {
        val cMap = new collection.mutable.HashMap[Char, Char]
        s1.zip(s2).forall { case (c1: Char, c2: Char) => {
          if (cMap.values.toSet.contains(c2) &&
              (cMap.get(c1) == None || cMap.get(c1).get != c2)) false
          else cMap.getOrElseUpdate(c1, c2) == c2
        }}
      }
    }//...............................................
  }

  val data = List(("egg","add"), ("foo","bar"), ("paper","title"), ("to", "aa"))
  data.toSeq.foreach { pair => println(pair._1 +", " +pair._2 +", "
    +IsomorphicStr.isomorphicStr(pair._1, pair._2)) }
