  object CourseSchedule {

    case class CourseNode(course: Int) {
      var preReqs = Map.empty[Int, CourseNode]
      override def toString: String = {
        "course: " +course.toString +", preReqs: " +preReqs.keySet.toList
      }
    }

    def apply(): Unit = {
      val data = (4, Seq((1,0),(2,0),(3,1),(3,2)))
      val data2 = (11, Seq((10,5),(5,3),(9,4),(4,2),(4,1),(4,0),(7,6),(2,9)))
      println(courseSchedule(data2).toList.distinct)
    }//.........................

    def getList(node:CourseNode): List[Int] = {
      var dep = node.course +: node.preReqs.keys.toList
      node.preReqs.unzip._2.toSeq.foreach { nd => dep = dep ++ getList(nd) }
      dep.distinct
    }

    def courseSchedule(data: (Int, Seq[(Int, Int)])): Seq[Int] = {
      var stor = Map.empty[Int, CourseNode]
      (0 until data._1).foreach { course =>
        stor = stor + (course -> new CourseNode(course)) }
      var indep = stor.keySet
      data._2.foreach { case (c:Int, p:Int) => {
        val crs = stor(c)
        crs.preReqs = crs.preReqs +(p -> stor(p))
        indep = indep -p
      }}

      if (indep.isEmpty) Seq[Int]() else {
        val rSeq =
          indep.toList.foldLeft(List[Int]()) { (ac, crs) => {
            stor.get(crs) match {
              case None => ac
              case Some(cn:CourseNode) => ac ++ getList(cn)
            }
          }}.distinct.toSeq
        if (rSeq.length < data._1) Seq[Int]() else rSeq
      }
    }//..................................
  }//end object CourseSchedule
