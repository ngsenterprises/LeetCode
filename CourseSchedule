
  object CourseSchedule {

    case class CourseNode(course: Int) {
      var preReqs = scala.collection.immutable.Set.empty[Int]
      val postElects = scala.collection.mutable.Set.empty[Int]
      override def toString: String = {
        "course: " +course.toString +"\n preReqs: " +preReqs.toList +"\n postElects: " +postElects.toList +"\n"
      }
    }

    def apply(): Unit = {
      val data = (4, Seq((1,0),(2,1),(3,2),(0,3)))
      val data2 = (11, Seq((10,5),(5,3),(9,4),(4,2),(4,1),(4,0),(7,6),(2,9)))
      val data3 = (4, Seq((2,1),(1,0),(3,1)))
      val data4 = (6, Seq((1,0),(2,1),(3,2),(5,0),(4,1)))
      println("res: " +courseSchedule(data4._1, data4._2).toList)
    }//.........................

    def courseSchedule(dataSize: Int, preReqs: Seq[(Int, Int)]): Seq[Int] = {

      val nodeStor = new Array[CourseNode](dataSize)
      (0 until dataSize).foreach { index => nodeStor(index) = new CourseNode(index) }
      var termCourses = (0 until dataSize).toSet
      preReqs.foreach { pr => {
        nodeStor(pr._1).preReqs = nodeStor(pr._1).preReqs +pr._2
        nodeStor(pr._2).postElects += pr._1
        termCourses = termCourses.filter( _ != pr._2)
      }}

      val courseList = new ListBuffer[Int]
      var terms = termCourses.filter( nodeStor( _ ).postElects.isEmpty )

      while (!terms.isEmpty) {
        terms.foreach { t => {
          t +=: courseList
          nodeStor(t).preReqs.foreach { index => nodeStor(index).postElects -= t }
          termCourses ++= nodeStor(t).preReqs
          termCourses -= t
        }}
        terms = termCourses.filter( nodeStor( _ ).postElects.isEmpty )
      }

      if (!terms.isEmpty) {
        println("ERROR1 - terminal course list: " +terms.toList)
        List()
      }
      else if (courseList.length != dataSize) {
        println("ERROR2 - final course list:  " +courseList.toList)
        List()
      }
      else courseList.toList
    }
  }
